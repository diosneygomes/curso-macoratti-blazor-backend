@page "/categorias"
@inject HttpClient http
@using System.Text.Json

<h3>Categorias</h3>

<div>
  <a class="btn btn-success" href="categoria/create">Nova Categoria</a>
</div>
<br />

<div class="form-inline">
    <label class="sr-only" for="filter-name">Filtro</label>
    <input type="text" class="form-control mb-2 mr-sm-2"
           @bind="nomeFiltro"
           placeholder="Filtrar pelo nome" />
    <button type="button" class="btn btn-primary mr-sm-2 mb-2" @onclick="Filtrar">
        Filtrar
    </button>
    <button type="button" class="btn btn-danger mb-2" @onclick="LimparFiltro">
        Limpar
    </button>
</div>

@if (Categorias == null)
{
	<p><em>Carregando...</em></p>
}
else if (Categorias.Count == 0)
{
	<p><em>Não existem categorias cadastras...</em></p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>Categoria</th>
				<th>Descrição</th>
				<th>Editar</th>
				<th>Deletar</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var categoria in Categorias)
			{
				<tr>
					<td>@categoria.Nome</td>
					<td>@categoria.Descricao</td>
					<td><a class="btn btn-primary" href="categoria/edit/@categoria.CategoriaId">Editar</a></td>
					<td><a class="btn btn-primary" @onclick="(() => DeletarCategoria(categoria.CategoriaId))">Deletar</a></td>
				</tr>
			}
		</tbody>
	</table>
}
<Confirma @ref="confirma" onCancela="@CancelaFirma" onConfirma="@DeletaConfirma">
	<div>Deseja realmente excluir esse item?</div>
</Confirma>

<hr />

<Paginacao QuantidadeTotalPaginas="QuantidadeTotalPaginas" paginaAtual="paginaAtual"
		   Raio="2" PaginaSelecionada="PaginaSelecionada">
</Paginacao>

@code {
	private List<Categoria> Categorias { get; set; }

	private Confirma confirma;

	private int codigoCategoria;

	private int QuantidadeTotalPaginas;
	private int paginaAtual = 1;
	private string nomeFiltro = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		await CarregarCategorias();
	}

	private async Task CarregarCategorias(int pagina=1, int quantidadePorPagina= 5)
	{
        var httpResponse = await http.GetAsync($"api/categoria?pagina={pagina}&quantidadePorPagina={quantidadePorPagina}&nome={nomeFiltro}");

        if(httpResponse.IsSuccessStatusCode)
        {
            QuantidadeTotalPaginas =
                int.Parse(httpResponse.Headers.GetValues("totalPaginas").FirstOrDefault());

            var responseString = await httpResponse.Content.ReadAsStringAsync();

            Categorias = JsonSerializer.Deserialize<List<Categoria>>(responseString,
                new JsonSerializerOptions()
                {
                    PropertyNameCaseInsensitive = true
                });
        }
	}

    private async Task Filtrar()
    {
        paginaAtual = 1;
        await CarregarCategorias();
    }

    private async Task LimparFiltro()
    {
        nomeFiltro = string.Empty;
        paginaAtual = 1;
        await CarregarCategorias();
    }

	private void DeletarCategoria(int categoriaId)
	{
		confirma.Exibir();

		codigoCategoria = categoriaId;
	}

	private async Task DeletaConfirma()
	{
		await http.DeleteAsync($"api/categoria/{codigoCategoria}");

		confirma.Ocultar();

		await CarregarCategorias();
	}

	private void CancelaFirma()
	{
		confirma.Ocultar();
	}

	private async Task PaginaSelecionada(int pagina)
	{
		paginaAtual = pagina;
		await CarregarCategorias(pagina);
	}
}
